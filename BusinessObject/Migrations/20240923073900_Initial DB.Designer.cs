// <auto-generated />
using BusinessObject;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessObject.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240923073900_Initial DB")]
    partial class InitialDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.33")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BusinessObject.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AddressId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            AddressId = 1,
                            City = "HCM City",
                            Street = "Nguyen Hue Street"
                        },
                        new
                        {
                            AddressId = 2,
                            City = "HCM City",
                            Street = "Le Loi Street"
                        },
                        new
                        {
                            AddressId = 3,
                            City = "Binh Duong",
                            Street = "Binh Duong Revenue"
                        },
                        new
                        {
                            AddressId = 4,
                            City = "Binh Duong",
                            Street = "Hung Vuong Street"
                        },
                        new
                        {
                            AddressId = 5,
                            City = "HCM City",
                            Street = "Pham Ngu Lao Street"
                        },
                        new
                        {
                            AddressId = 6,
                            City = "HCM City",
                            Street = "Hai Ba Trung Street"
                        },
                        new
                        {
                            AddressId = 7,
                            City = "Binh Duong",
                            Street = "Tran Hung Dao Street"
                        },
                        new
                        {
                            AddressId = 8,
                            City = "Binh Duong",
                            Street = "Le Hong Phong Street"
                        },
                        new
                        {
                            AddressId = 9,
                            City = "HCM City",
                            Street = "Ton Duc Thang Street"
                        },
                        new
                        {
                            AddressId = 10,
                            City = "HCM City",
                            Street = "Dien Bien Phu Street"
                        });
                });

            modelBuilder.Entity("BusinessObject.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"), 1L, 1);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IBSN")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PressId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("BookId");

                    b.HasIndex("AddressId");

                    b.HasIndex("PressId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("BusinessObject.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Book"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Magazine"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "EBook"
                        });
                });

            modelBuilder.Entity("BusinessObject.Press", b =>
                {
                    b.Property<int>("PressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PressId"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("PressName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PressId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Presses");

                    b.HasData(
                        new
                        {
                            PressId = 1,
                            CategoryId = 1,
                            PressName = "Kim Dong Publishing House"
                        },
                        new
                        {
                            PressId = 2,
                            CategoryId = 1,
                            PressName = "Tre Publishing House"
                        },
                        new
                        {
                            PressId = 3,
                            CategoryId = 1,
                            PressName = "National Political Publishing House"
                        },
                        new
                        {
                            PressId = 4,
                            CategoryId = 1,
                            PressName = "General Publishing House"
                        },
                        new
                        {
                            PressId = 5,
                            CategoryId = 2,
                            PressName = "Communication And News Publishing House"
                        },
                        new
                        {
                            PressId = 6,
                            CategoryId = 1,
                            PressName = "Education Publishing House"
                        },
                        new
                        {
                            PressId = 7,
                            CategoryId = 2,
                            PressName = "Women Publishing House"
                        },
                        new
                        {
                            PressId = 8,
                            CategoryId = 2,
                            PressName = "Lao Dong Publishing House"
                        },
                        new
                        {
                            PressId = 9,
                            CategoryId = 3,
                            PressName = "Science And Technology Publishing House"
                        },
                        new
                        {
                            PressId = 10,
                            CategoryId = 3,
                            PressName = "Culture And Arts Publishing House"
                        });
                });

            modelBuilder.Entity("BusinessObject.Book", b =>
                {
                    b.HasOne("BusinessObject.Address", "Address")
                        .WithMany("Books")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Press", "Press")
                        .WithMany("Books")
                        .HasForeignKey("PressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Press");
                });

            modelBuilder.Entity("BusinessObject.Press", b =>
                {
                    b.HasOne("BusinessObject.Category", "Category")
                        .WithMany("Presses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BusinessObject.Address", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BusinessObject.Category", b =>
                {
                    b.Navigation("Presses");
                });

            modelBuilder.Entity("BusinessObject.Press", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
